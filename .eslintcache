[{"C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\index.tsx":"1","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\serviceWorker.ts":"2","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\components\\App.tsx":"3","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\pages\\HomePage.tsx":"4","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\pages\\inventoryPage.tsx":"5","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\components\\Firebase\\firebase2.js":"6","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\components\\InventoryDisplay.tsx":"7","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\components\\MyModal.tsx":"8","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\pages\\InventoryPage.tsx":"9"},{"size":456,"mtime":1606701565455,"results":"10","hashOfConfig":"11"},{"size":5358,"mtime":1605898092761,"results":"12","hashOfConfig":"11"},{"size":1719,"mtime":1608166384413,"results":"13","hashOfConfig":"11"},{"size":3175,"mtime":1608170070332,"results":"14","hashOfConfig":"11"},{"size":5761,"mtime":1608164801621,"results":"15","hashOfConfig":"11"},{"size":525,"mtime":1606701565422,"results":"16","hashOfConfig":"11"},{"size":3064,"mtime":1608166405397,"results":"17","hashOfConfig":"11"},{"size":2275,"mtime":1608167353781,"results":"18","hashOfConfig":"11"},{"size":8228,"mtime":1608168550177,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"kby85r",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"23"},"C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\index.tsx",["47","48"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport FirebaseContext from './components/Firebase';\r\nimport Firebase from './components/Firebase';\r\n\r\n\r\nReactDOM.render(\r\n    // <FirebaseContext.Provider value={new Firebase()}>\r\n        <App />,\r\n    // </FirebaseContext.Provider>,\r\n    document.getElementById('root'),);\r\n\r\nserviceWorker.unregister();",["49","50"],"C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\serviceWorker.ts",[],"C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\components\\App.tsx",["51","52","53","54","55","56","57"],"import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Redirect, Route } from 'react-router-dom';\r\nimport {\r\n        IonApp, IonRouterOutlet, IonContent,\r\n      } from '@ionic/react';\r\nimport { IonReactRouter, IonReactHashRouter } from '@ionic/react-router';\r\nimport { close, help, fileTrayFullOutline,} from 'ionicons/icons';\r\nimport InventoryPage from '../pages/InventoryPage';\r\nimport HomePage from '../pages/HomePage';\r\n\r\n/* Core CSS required for Ionic components to work properly */\r\nimport '@ionic/react/css/core.css';\r\n\r\n/* Basic CSS for apps built with Ionic */\r\nimport '@ionic/react/css/normalize.css';\r\nimport '@ionic/react/css/structure.css';\r\nimport '@ionic/react/css/typography.css';\r\n\r\n/* Optional CSS utils that can be commented out */\r\nimport '@ionic/react/css/padding.css';\r\nimport '@ionic/react/css/float-elements.css';\r\nimport '@ionic/react/css/text-alignment.css';\r\nimport '@ionic/react/css/text-transformation.css';\r\nimport '@ionic/react/css/flex-utils.css';\r\nimport '@ionic/react/css/display.css';\r\n\r\n/* Theme variables */\r\nimport '../theme/variables.css';\r\n\r\n/**\r\n * Initializes app pages\r\n*/\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const [questionModal, setQuestionModal] = useState({ isOpen: false });\r\n\r\n  return(\r\n  <IonApp>\r\n    <IonContent>     \r\n        <IonReactHashRouter>\r\n          <IonRouterOutlet >\r\n            <Route path=\"/tab1\" component={InventoryPage} exact={true} />\r\n            <Route path=\"/homepage\" component= {HomePage} exact={true}/>\r\n            <Route path=\"/\" render={() => <Redirect to=\"/homepage\" />} exact={true} />\r\n          </IonRouterOutlet>\r\n        </IonReactHashRouter>\r\n      </IonContent>\r\n  </IonApp>\r\n   );\r\n  };\r\nexport default App;","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\pages\\HomePage.tsx",["58","59","60"],"import React, { useState } from 'react';\r\nimport {\r\n        IonApp, IonHeader, IonIcon, IonTitle, IonToolbar, IonContent, IonButton, IonModal, IonText, IonRouterLink, IonCard, IonCardHeader, IonCardContent, IonPage, IonLabel, IonItem,\r\n      } from '@ionic/react';\r\nimport { close} from 'ionicons/icons';\r\nimport {useHistory } from \"react-router\";\r\nimport './HomePage.css';\r\nimport logo from './pantryLogo.png';\r\n\r\n/* Core CSS required for Ionic components to work properly */\r\nimport '@ionic/react/css/core.css';\r\n\r\n/* Basic CSS for apps built with Ionic */\r\nimport '@ionic/react/css/normalize.css';\r\nimport '@ionic/react/css/structure.css';\r\nimport '@ionic/react/css/typography.css';\r\n\r\n/* Optional CSS utils that can be commented out */\r\nimport '@ionic/react/css/padding.css';\r\nimport '@ionic/react/css/float-elements.css';\r\nimport '@ionic/react/css/text-alignment.css';\r\nimport '@ionic/react/css/text-transformation.css';\r\nimport '@ionic/react/css/flex-utils.css';\r\nimport '@ionic/react/css/display.css';\r\n\r\n/* Theme variables */\r\nimport '../theme/variables.css';\r\n\r\nconst HomePage: React.FC = () => {\r\n  const [adminModal, setAdminnModal] = useState({ isOpen: false });    \r\n  const history = useHistory();\r\n\r\n  return(\r\n    <IonApp>\r\n      <IonPage>\r\n        <IonHeader>\r\n        </IonHeader>\r\n\r\n        <IonContent fullscreen>\r\n          <div className=\"container\">\r\n            <img src={logo} alt=\"logo\" />\r\n          </div>\r\n          <IonCard className= \"card-padding\">\r\n           <IonCardHeader>\r\n            </IonCardHeader>\r\n            <IonCardContent>\r\n              <IonButton  expand=\"block\" className= \"btn-padding\" size=\"large\" onClick={() => {\r\n                  history.push('/tab1')\r\n            }}>View Pantry Inventory</IonButton>\r\n             <IonItem>\r\n               <IonLabel> \r\n                 Admin? Log in <IonRouterLink color= \"secondary\" href=\"https://idp.quicklaunchsso.com/macalester\" target=\"_blank\">here!</IonRouterLink>\r\n               </IonLabel>\r\n             </IonItem>\r\n            </IonCardContent>\r\n          </IonCard>\r\n        </IonContent>\r\n      </IonPage>\r\n    </IonApp>\r\n  );\r\n};\r\n  export default HomePage;\r\n\r\n  const adminModal:React.FC<any> = ({isOpen, onClose}) => {\r\n\r\n    return <IonModal isOpen={isOpen}>\r\n          <IonHeader>\r\n            <IonToolbar>\r\n              <IonTitle>\r\n                Welcome to the Open Pantry\r\n              </IonTitle>\r\n              <IonButton color= \"secondary\" slot =\"end\" onClick={onClose} >\r\n                <IonIcon slot= \"icon-only\" icon ={close}>\r\n                </IonIcon>\r\n              </IonButton>\r\n            </IonToolbar>\r\n          </IonHeader>\r\n          <IonContent className =\"ion-padding\">\r\n            <IonText>\r\n              <h3>\r\n                Welcome to the Mac Open Pantry! This is a textbox for more\r\n                info about the Open Pantry and things like that. Can't find an item? Request \r\n                an item or make suggestions <IonRouterLink color= \"secondary\" href=\"https://forms.gle/yjcNm1owrxcMzsxx7\" target=\"_blank\">here!</IonRouterLink>\r\n              </h3>\r\n            </IonText>\r\n          </IonContent>\r\n        </IonModal>\r\n  }\r\n","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\pages\\inventoryPage.tsx",["61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77"],"C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\components\\Firebase\\firebase2.js",[],["78","79"],"C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\components\\InventoryDisplay.tsx",["80","81","82"],"import React, { Component, FC, useState } from 'react';\r\nimport \"./InventoryDisplay.css\";\r\nimport {\r\n        IonList, IonItem, IonButton, IonAlert, IonListHeader, IonLabel, IonHeader, IonContent\r\n        } from '@ionic/react';\r\n\r\n    type Item = {\r\n        itemName: Array<string>;\r\n        subItems?: {[category: string]: string[] | undefined;};\r\n        updateBag?: Function;\r\n        setMyModal?: Function; \r\n    } \r\n\r\n    /**\r\n     * InventoryDisplay is passed the category objects, as well as the item objects created in InventoryPage (using data imported from firestore).\r\n     * The constant then displays the categories as ion-headers, and the pantry items as ion-labels within ion-items. \r\n     * On the right hand side of the web page, InventoryDisplay then adds \"Add Item\" buttons which add the item to \"My Bag.\"\r\n     * \r\n     * @param item is all the variables declared as \"type Item\"\r\n     * \r\n     */\r\n\r\n    const InventoryDisplay: React.FC<Item> = (item) => {\r\n        const [showAlert1, setShowAlert1] = useState(false);\r\n        const [clickedItemName, setclickedItemName ] = useState(\"\");\r\n        const { itemName,subItems,updateBag, setMyModal} = item;\r\n      \r\n        return(    \r\n            <IonList>\r\n                {itemName && itemName.map((i) => {\r\n                return (\r\n                <IonList lines=\"inset\" inset= {true}>\r\n                    <IonListHeader >                    \r\n                        <IonLabel>\r\n                            <strong> {i} </strong> \r\n                        </IonLabel>                         \r\n                    </IonListHeader> \r\n                    {subItems[i] && subItems[i].map( element => {\r\n                        return (\r\n                            <IonItem>\r\n                                <IonLabel>\r\n                                    <small> {element} </small>\r\n                                </IonLabel>\r\n                                <IonButton slot= \"end\" color= \"danger\" onClick={() => {updateBag(i, element); setShowAlert1(true); setclickedItemName(element);}} expand=\"block\">Add Item </IonButton>                            \r\n                            </IonItem>)\r\n                })}\r\n            </IonList>\r\n        )})}\r\n            <IonContent>\r\n                <IonAlert\r\n                    isOpen={showAlert1}\r\n                    onDidDismiss={() => setShowAlert1(false)}\r\n                    header={ `${clickedItemName} was added to cart` }\r\n                    message={'Would you like to keep shopping?'}\r\n                    buttons= {[\r\n                        {\r\n                             text: 'Keep Shopping',\r\n                             handler: () => {}\r\n                        },\r\n                        {\r\n                            text: 'My Bag',\r\n                            handler: () => {\r\n                                setMyModal({isOpen:true})\r\n                            }}]}/>\r\n                </IonContent>                \r\n            </IonList>\r\n        );          \r\n    };  \r\n    export default InventoryDisplay;","C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\components\\MyModal.tsx",["83","84","85"],"import { IonButton, IonContent, IonHeader, IonIcon, IonItem, IonLabel, IonModal, IonTitle, IonToolbar } from \"@ionic/react\";\r\nimport React, { useState } from \"react\";\r\nimport { db } from '../components/Firebase/firebase2.js';\r\nimport 'firebase/firestore';\r\nimport firebase from \"firebase\";\r\n\r\n\r\n/**\r\n     * MyModal is passed an isOpen function, and onClose function, and an Object that acts as myBag.\r\n     * The component makes a modal that displays the contents within the \"bag\". It displays each item\r\n     * and the quantity added in seperate Ion Labels within Ion Items. The modal has a \"confirm\" button to \r\n     * confirm the submission of the contents of the bag that updates the firestore database and sends the user\r\n     * to a google form exit survey.\r\n     * This component also creates a \"checkout\" button that shows the modal when pressed.\r\n     * \r\n     * @param isOpen  is a boolean that opens the modal\r\n     * @param onClose is a boolean that closes the modal\r\n     * @param myBag   is an Object type that has Categories as keys and an Object with ItemName and Quantity \r\n     *                key-value pairings as the values.\r\n     * \r\n     */\r\nconst MyModal:React.FC<any> = ({isOpen, onClose, myBag}) => {\r\n    let items = Object.values(myBag);\r\n    \r\n    return (\r\n        <IonModal isOpen={isOpen}>\r\n          <IonHeader>\r\n            <IonToolbar>\r\n              <IonTitle>\r\n                My Bag\r\n              </IonTitle>\r\n              <IonButton color=\"danger\" slot =\"end\" onClick={onClose} >\r\n                <IonIcon slot= \"icon-only\" icon=\"close\">\r\n                </IonIcon>\r\n              </IonButton>\r\n            </IonToolbar>\r\n          </IonHeader>\r\n          <IonContent className =\"ion-padding\">\r\n          {items.map((item) => {\r\n            return Object.entries(item).map((entry) => {\r\n              return(\r\n                <IonItem>\r\n                  <IonLabel>\r\n                      {entry[0] + \" : \" + entry[1]} \r\n                  </IonLabel> \r\n                </IonItem> )})\r\n            })}\r\n          </IonContent>\r\n          <IonButton color = \"danger\" onClick={onClose} href= \"https://forms.gle/yjcNm1owrxcMzsxx7\" target= \"_blank\"> Confirm\r\n          </IonButton>\r\n        </IonModal>\r\n    )};\r\n  export default MyModal;",["86","87"],"C:\\Users\\Augusta\\Documents\\GitHub\\Mac_OpenPantry\\src\\pages\\InventoryPage.tsx",["88","89","90","91","92","93","94","95","96","97","98","99","100"],"import React, { useState } from 'react';\r\nimport { IonContent, IonModal, IonFooter, IonHeader, IonItem, IonLabel, IonNote, IonPage, IonTitle, IonToolbar, IonList, IonButton, IonFab, IonIcon, IonFabButton, IonApp, IonBackButton, IonButtons, IonText, IonRouterLink } from '@ionic/react';\r\nimport './InventoryPage.css';\r\nimport InventoryDisplay from '../components/InventoryDisplay';\r\nimport { db } from '../components/Firebase/firebase2.js';\r\nimport {close, help, basketOutline, basketSharp, ellipse, fastFoodOutline, fileTrayFullOutline, square, triangle } from 'ionicons/icons';\r\nimport 'firebase/firestore';\r\nimport firebase from \"firebase\";\r\nimport MyModal from '../components/MyModal';\r\n\r\n/**\r\n * Returns a Promis<string[]> that consists of all the string value document\r\n * names for the given collection passed into the function.\r\n * For the collection name given, for each document in the collection,\r\n * the document id (string) is added to the Promise<string[]>\r\n * \r\n * @param collection A string that is the name of the collection that the \r\n *                   documents are getting grabbed from\r\n */\r\n\r\nasync function returnAllDocs(collection:string): Promise<string[]>\r\n{\r\n  var returnArray:string[] = new Array(11);\r\n  let i: number = 0;\r\n  return db.collection(collection).get().then(function(querySnapshot) {\r\n    querySnapshot.forEach(function(doc) {\r\n        returnArray[i]= doc.id;\r\n        i++;\r\n    });\r\n    return returnArray;\r\n  });\r\n \r\n}\r\n/**\r\n   * No return, takes in an object that is the myBag which consists of\r\n   * all the items taken by the customer\r\n   * Iterates through the keys (collection name in firestore) and \r\n   * values (another keyvalue pair with the key of the item name and value of the quantity of item being ordered)\r\n   * to change said item's quantity value in the firestore database\r\n   * \r\n   * @param bag an object that consists of the a list of the items taken by user\r\n*/\r\n\r\nfunction updateFirestore(bag:{}){\r\n  let listOfCategories = Object.keys(bag);\r\n  let itemAndQuantities = Object.values(bag);\r\n  let count:number = 0;\r\n  while(count<listOfCategories.length){\r\n    db.collection(listOfCategories[count]).doc(Object.keys(itemAndQuantities[count])[0]).update({\r\n      \"quantity\" :firebase.firestore.FieldValue.increment((-1)*Object.values(itemAndQuantities[count])[0])\r\n    })\r\n    count++;\r\n  }\r\n}\r\n\r\nconst InventoryPage: React.FC = () => {\r\n  const [myModal, setMyModal] = useState({ isOpen: false });\r\n  const [catList, setCatList] = useState<string[]>([]);\r\n  const [docMap, setDocMap] = useState<{[category: string]: string[];}>({});\r\n  \r\n  let arrayOfDocs = returnAllDocs(\"Category Names\");\r\n  let categoryLists: string[];\r\n\r\n  arrayOfDocs.then((docs: string[])=>{\r\n    categoryLists = docs;\r\n    setCatList(categoryLists);\r\n\r\n    categoryLists.forEach(c => {\r\n      let useDocsList = returnAllDocs(c);\r\n      \r\n      useDocsList.then((docs: string[])=>{\r\n        let itemList: string[];\r\n        itemList = docs;\r\n        docMap[c] = itemList;\r\n        setDocMap(docMap);\r\n      });\r\n    })    \r\n  });\r\n  \r\n  const [myBag, setmyBag] = useState({});\r\n\r\n  /**\r\n   * Constant function with parameters name of firebase collection (string) and \r\n   * name of the item (string) being selected by user.\r\n   * \r\n   * The bag in which the items are being added to is an object declared as a constant\r\n   * \r\n   * If there is already an item of the same collection and item name in the bag,\r\n   * it increments the quantity value. Otherwise, it creates a new item in the bag\r\n   * and then increments the item quantity from 0 to 1\r\n   * \r\n   * @param collection  a string that represents the name of the collection \r\n   *                    that the food item is associated with in firebase, \r\n   *                    the category name the food item falls under\r\n   * @param name        a string that represents the name of the food item being \r\n   *                    taken by the user and the document name in firebase to \r\n   *                    correlate with the item and collection name it falls \r\n   *                    under\r\n   */\r\n  const updateBag = (collection:string, name:string) => {\r\n    if (!(collection in myBag)) {\r\n      myBag[collection] = {}\r\n    }\r\n    if (!(name in myBag[collection])){\r\n      myBag[collection][name] = 0;\r\n    }\r\n    myBag[collection][name]++;\r\n    setmyBag(myBag);\r\n  }\r\n\r\n  const [questionModal, setQuestionModal] = useState({ isOpen: false });\r\n\r\n  return (\r\n    <IonApp>\r\n        <IonPage>\r\n            <IonContent fullscreen>\r\n                <IonToolbar>\r\n                    <IonButton color = \"secondary\" slot=\"start\">\r\n                        <IonBackButton defaultHref=\"homepage\" />\r\n                    </IonButton>\r\n                    <IonButton slot=\"end\" onClick={() => setQuestionModal({isOpen:true})}>\r\n                        <IonIcon slot= \"icon-only\" icon ={help}> </IonIcon>\r\n                    </IonButton>\r\n                <IonTitle color=\"secondary\">Pantry Inventory</IonTitle>\r\n                </IonToolbar>\r\n                <QuestionModal isOpen={questionModal.isOpen} onClose={() => setQuestionModal({isOpen:false})}/>\r\n                <IonButtons slot= \"primary\">\r\n                    <IonButton>\r\n                        <IonIcon slot= \"icon-only\" name = \"close\">\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </IonButtons><QuestionModal isOpen={questionModal.isOpen} onClose={() => setQuestionModal({isOpen:false})}/>\r\n                <IonButtons slot= \"primary\">\r\n                    <IonButton>\r\n                        <IonIcon slot= \"icon-only\" name = \"close\">\r\n                        </IonIcon>\r\n                    </IonButton>\r\n                </IonButtons>\r\n                    <IonButton slot= \"end\" color= \"danger\" ></IonButton>\r\n                    <p className=\"ion-padding-start ion-padding-end\"> </p>\r\n                    <InventoryDisplay itemName={catList} subItems={docMap} updateBag = {updateBag} setMyModal={setMyModal}></InventoryDisplay>\r\n                     <p className=\"ion-padding-start ion-padding-end\"></p> \r\n            </IonContent>\r\n                <MyModal \r\n                    myBag={myBag}\r\n                    isOpen={myModal.isOpen} \r\n                    onClose={() => {setMyModal({isOpen:false});updateFirestore(myBag);}}/>\r\n            <IonFooter>\r\n              <IonToolbar>\r\n                <IonButton className= \"btnpadding\" size= \"large\" color= \"danger\" id=\"myBag\" slot=\"end\" onClick={() =>  setMyModal({isOpen:true})}>My Bag\r\n                </IonButton>\r\n              </IonToolbar>\r\n            </IonFooter>\r\n        </IonPage>\r\n    </IonApp>\r\n  );\r\n};\r\nexport default InventoryPage;\r\n\r\n/**\r\n * The QuestionModal is the pop up that appears when the \"?\" button is pressed.\r\n * On the pop up is an explanation of the app for first time users and a link\r\n * to the Open Pantry's google form to request items for the pantry or make\r\n * any other comments on the app or the pantry itself\r\n */\r\nconst QuestionModal:React.FC<any> = ({isOpen, onClose}) => {\r\n\r\n  return <IonModal isOpen={isOpen}>\r\n        <IonHeader>\r\n          <IonToolbar>\r\n            <IonTitle>\r\n              Welcome to the Open Pantry\r\n            </IonTitle>\r\n            <IonButton color= \"secondary\" slot =\"end\" onClick={onClose} >\r\n              <IonIcon slot= \"icon-only\" icon ={close}>\r\n              </IonIcon>\r\n            </IonButton>\r\n          </IonToolbar>\r\n        </IonHeader>\r\n        <IonContent className =\"ion-padding\">\r\n          <IonText>\r\n            <h3>\r\n              Welcome to the Mac Open Pantry!\r\n              Navigate through the inventory and add the items you are planning to take.\r\n              Click add item for each individual item you are taking.  \r\n              Click 'My Bag' to view the items you have taken and finalize your visit.\r\n              Can't find an item? Request an item or make suggestions <IonRouterLink \r\n                color= \"secondary\" href=\"https://forms.gle/1hjgX7uVwRH3DfXs5\" target=\"_blank\"> here!\r\n              </IonRouterLink>\r\n               The Open Pantry is restocked every Thursday.\r\n            </h3>\r\n          </IonText>\r\n        </IonContent>\r\n      </IonModal>\r\n}",{"ruleId":"101","severity":1,"message":"102","line":5,"column":8,"nodeType":"103","messageId":"104","endLine":5,"endColumn":23},{"ruleId":"101","severity":1,"message":"105","line":6,"column":8,"nodeType":"103","messageId":"104","endLine":6,"endColumn":16},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"101","severity":1,"message":"110","line":2,"column":27,"nodeType":"103","messageId":"104","endLine":2,"endColumn":33},{"ruleId":"101","severity":1,"message":"111","line":6,"column":10,"nodeType":"103","messageId":"104","endLine":6,"endColumn":24},{"ruleId":"101","severity":1,"message":"112","line":7,"column":10,"nodeType":"103","messageId":"104","endLine":7,"endColumn":15},{"ruleId":"101","severity":1,"message":"113","line":7,"column":17,"nodeType":"103","messageId":"104","endLine":7,"endColumn":21},{"ruleId":"101","severity":1,"message":"114","line":7,"column":23,"nodeType":"103","messageId":"104","endLine":7,"endColumn":42},{"ruleId":"101","severity":1,"message":"115","line":36,"column":10,"nodeType":"103","messageId":"104","endLine":36,"endColumn":23},{"ruleId":"101","severity":1,"message":"116","line":36,"column":25,"nodeType":"103","messageId":"104","endLine":36,"endColumn":41},{"ruleId":"101","severity":1,"message":"117","line":30,"column":10,"nodeType":"103","messageId":"104","endLine":30,"endColumn":20},{"ruleId":"101","severity":1,"message":"118","line":30,"column":22,"nodeType":"103","messageId":"104","endLine":30,"endColumn":36},{"ruleId":"101","severity":1,"message":"117","line":64,"column":9,"nodeType":"103","messageId":"104","endLine":64,"endColumn":33},{"ruleId":"101","severity":1,"message":"119","line":3,"column":54,"nodeType":"103","messageId":"104","endLine":3,"endColumn":61},{"ruleId":"101","severity":1,"message":"120","line":3,"column":63,"nodeType":"103","messageId":"104","endLine":3,"endColumn":71},{"ruleId":"101","severity":1,"message":"121","line":3,"column":73,"nodeType":"103","messageId":"104","endLine":3,"endColumn":80},{"ruleId":"101","severity":1,"message":"122","line":3,"column":113,"nodeType":"103","messageId":"104","endLine":3,"endColumn":120},{"ruleId":"101","severity":1,"message":"123","line":3,"column":133,"nodeType":"103","messageId":"104","endLine":3,"endColumn":139},{"ruleId":"101","severity":1,"message":"124","line":3,"column":150,"nodeType":"103","messageId":"104","endLine":3,"endColumn":162},{"ruleId":"101","severity":1,"message":"125","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":24},{"ruleId":"101","severity":1,"message":"126","line":8,"column":22,"nodeType":"103","messageId":"104","endLine":8,"endColumn":35},{"ruleId":"101","severity":1,"message":"127","line":8,"column":37,"nodeType":"103","messageId":"104","endLine":8,"endColumn":48},{"ruleId":"101","severity":1,"message":"128","line":8,"column":50,"nodeType":"103","messageId":"104","endLine":8,"endColumn":57},{"ruleId":"101","severity":1,"message":"129","line":8,"column":59,"nodeType":"103","messageId":"104","endLine":8,"endColumn":74},{"ruleId":"101","severity":1,"message":"114","line":8,"column":76,"nodeType":"103","messageId":"104","endLine":8,"endColumn":95},{"ruleId":"101","severity":1,"message":"130","line":8,"column":97,"nodeType":"103","messageId":"104","endLine":8,"endColumn":103},{"ruleId":"101","severity":1,"message":"131","line":8,"column":105,"nodeType":"103","messageId":"104","endLine":8,"endColumn":113},{"ruleId":"101","severity":1,"message":"132","line":9,"column":10,"nodeType":"103","messageId":"104","endLine":9,"endColumn":19},{"ruleId":"101","severity":1,"message":"133","line":10,"column":10,"nodeType":"103","messageId":"104","endLine":10,"endColumn":19},{"ruleId":"101","severity":1,"message":"134","line":11,"column":10,"nodeType":"103","messageId":"104","endLine":11,"endColumn":18},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"101","severity":1,"message":"132","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":26},{"ruleId":"101","severity":1,"message":"135","line":1,"column":28,"nodeType":"103","messageId":"104","endLine":1,"endColumn":30},{"ruleId":"101","severity":1,"message":"136","line":4,"column":73,"nodeType":"103","messageId":"104","endLine":4,"endColumn":82},{"ruleId":"101","severity":1,"message":"137","line":2,"column":17,"nodeType":"103","messageId":"104","endLine":2,"endColumn":25},{"ruleId":"101","severity":1,"message":"138","line":3,"column":10,"nodeType":"103","messageId":"104","endLine":3,"endColumn":12},{"ruleId":"101","severity":1,"message":"139","line":5,"column":8,"nodeType":"103","messageId":"104","endLine":5,"endColumn":16},{"ruleId":"106","replacedBy":"140"},{"ruleId":"108","replacedBy":"141"},{"ruleId":"101","severity":1,"message":"119","line":2,"column":54,"nodeType":"103","messageId":"104","endLine":2,"endColumn":61},{"ruleId":"101","severity":1,"message":"120","line":2,"column":63,"nodeType":"103","messageId":"104","endLine":2,"endColumn":71},{"ruleId":"101","severity":1,"message":"121","line":2,"column":73,"nodeType":"103","messageId":"104","endLine":2,"endColumn":80},{"ruleId":"101","severity":1,"message":"122","line":2,"column":113,"nodeType":"103","messageId":"104","endLine":2,"endColumn":120},{"ruleId":"101","severity":1,"message":"123","line":2,"column":133,"nodeType":"103","messageId":"104","endLine":2,"endColumn":139},{"ruleId":"101","severity":1,"message":"124","line":2,"column":150,"nodeType":"103","messageId":"104","endLine":2,"endColumn":162},{"ruleId":"101","severity":1,"message":"126","line":6,"column":22,"nodeType":"103","messageId":"104","endLine":6,"endColumn":35},{"ruleId":"101","severity":1,"message":"127","line":6,"column":37,"nodeType":"103","messageId":"104","endLine":6,"endColumn":48},{"ruleId":"101","severity":1,"message":"128","line":6,"column":50,"nodeType":"103","messageId":"104","endLine":6,"endColumn":57},{"ruleId":"101","severity":1,"message":"129","line":6,"column":59,"nodeType":"103","messageId":"104","endLine":6,"endColumn":74},{"ruleId":"101","severity":1,"message":"114","line":6,"column":76,"nodeType":"103","messageId":"104","endLine":6,"endColumn":95},{"ruleId":"101","severity":1,"message":"130","line":6,"column":97,"nodeType":"103","messageId":"104","endLine":6,"endColumn":103},{"ruleId":"101","severity":1,"message":"131","line":6,"column":105,"nodeType":"103","messageId":"104","endLine":6,"endColumn":113},"@typescript-eslint/no-unused-vars","'FirebaseContext' is defined but never used.","Identifier","unusedVar","'Firebase' is defined but never used.","no-native-reassign",["142"],"no-negated-in-lhs",["143"],"'Router' is defined but never used.","'IonReactRouter' is defined but never used.","'close' is defined but never used.","'help' is defined but never used.","'fileTrayFullOutline' is defined but never used.","'questionModal' is assigned a value but never used.","'setQuestionModal' is assigned a value but never used.","'adminModal' is assigned a value but never used.","'setAdminnModal' is assigned a value but never used.","'IonItem' is defined but never used.","'IonLabel' is defined but never used.","'IonNote' is defined but never used.","'IonList' is defined but never used.","'IonFab' is defined but never used.","'IonFabButton' is defined but never used.","'ExploreContainer' is defined but never used.","'basketOutline' is defined but never used.","'basketSharp' is defined but never used.","'ellipse' is defined but never used.","'fastFoodOutline' is defined but never used.","'square' is defined but never used.","'triangle' is defined but never used.","'Component' is defined but never used.","'stringify' is defined but never used.","'promises' is defined but never used.","'FC' is defined but never used.","'IonHeader' is defined but never used.","'useState' is defined but never used.","'db' is defined but never used.","'firebase' is defined but never used.",["142"],["143"],"no-global-assign","no-unsafe-negation"]